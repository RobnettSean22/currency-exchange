{"version":3,"sources":["Components/Chart/Chart.jsx","Components/Currency/Currency.jsx","App.js","serviceWorker.js","index.js"],"names":["Chart","props","getstuff","setState","visible","chartData","labels","name","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","exc","state","bind","console","log","this","id","onClick","className","options","title","display","text","date","based","fontSize","legend","Component","Currency","exchangeRates","axios","get","then","res","CurrencyRates","rates","fromChange","e","fromSelect","target","value","split","toChange","toSelect","calc","amountInput","calculated","exchanged","toFixed","toString","replace","rate","reverseRate","oneFromRate","oneToRate","rateArray","Object","entries","s","map","b","t","sortArrays","sort","items","i","key","onChange","base","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61ae1bfe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Chart.scss\";\nimport { HorizontalBar, Line, Pie } from \"react-chartjs-2\";\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartData: {},\n      visible: false\n    };\n    this.getstuff = this.getstuff.bind(this);\n  }\n\n  getstuff = () => {\n    this.setState({\n      visible: true,\n      chartData: {\n        labels: this.props.name,\n        datasets: [\n          {\n            label: \"Ratest\",\n            fill: true,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(75,192,192,0.4)\",\n            borderColor: \"rgba(75,192,192,1)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgba(75,192,192,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: this.props.exc\n          }\n        ]\n      }\n    });\n  };\n  render() {\n    console.log(this.props.name, this.props.exc);\n\n    return (\n      <div>\n        <div id='button-case'>\n          <button onClick={this.getstuff}>Chart</button>\n        </div>\n        <div className={this.state.visible === true ? \"see\" : \"blind\"}>\n          <Line\n            data={this.state.chartData}\n            options={{\n              title: {\n                display: true,\n                text: `${this.props.date} ${this.props.based} Exchange Rates`,\n                fontSize: 25\n              },\n              legend: {\n                display: false\n              }\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chart;\n","import React, { Component } from \"react\";\nimport Chart from \"../Chart/Chart\";\nimport \"./Currency.scss\";\nimport axios from \"axios\";\n\nclass Currency extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n      CurrencyRates: [],\n\n      amountInput: \"\",\n      fromSelect: [\"1\"],\n      toSelect: [\"1\"],\n      exchanged: null,\n      oneToRate: null,\n      oneFromRate: null,\n      display: false\n    };\n    this.fromChange = this.fromChange.bind(this);\n  }\n  componentDidMount() {\n    this.exchangeRates();\n  }\n  exchangeRates = () => {\n    axios.get(`https://api.exchangeratesapi.io/latest`).then(res => {\n      this.setState({\n        data: res.data,\n        CurrencyRates: res.data.rates\n      });\n    });\n  };\n\n  fromChange = e => {\n    this.setState({\n      fromSelect: e.target.value.split(\",\")\n    });\n  };\n  toChange = e => {\n    this.setState({\n      toSelect: e.target.value.split(\",\")\n    });\n  };\n\n  calc = () => {\n    const { fromSelect, amountInput, toSelect } = this.state;\n    if (fromSelect[0] === 1) {\n      let calculated = amountInput * toSelect[0];\n      this.setState({\n        exchanged: calculated\n          .toFixed(3)\n          .toString()\n          .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\"),\n        display: true,\n        amountInput: this.state.amountInput\n          .toString()\n          .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n      });\n    } else if (toSelect[0] === 1) {\n      let rate = 1 / fromSelect[0];\n      let reverseRate = toSelect[0] / fromSelect[0];\n      let calculated = amountInput * rate;\n      this.setState({\n        exchanged: calculated\n          .toFixed(3)\n          .toString()\n          .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\"),\n        oneFromRate: rate.toFixed(3),\n        oneToRate: reverseRate.toFixed(3),\n        display: true,\n        amountInput: this.state.amountInput\n          .toString()\n          .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n      });\n    } else if (fromSelect[0] || toSelect[0] !== 1) {\n      let reverseRate = toSelect[0] / fromSelect[0];\n      let rate = fromSelect[0] / toSelect[0];\n      let calculated = amountInput * reverseRate;\n      this.setState({\n        exchanged: calculated\n          .toFixed(3)\n          .toString()\n          .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\"),\n        oneFromRate: reverseRate.toFixed(3),\n        oneToRate: rate.toFixed(3),\n        display: true,\n        amountInput: this.state.amountInput\n          .toString()\n          .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n      });\n    }\n  };\n\n  render() {\n    const {\n      CurrencyRates,\n      amountInput,\n      fromSelect,\n      toSelect,\n      exchanged,\n      oneFromRate,\n      oneToRate,\n      display,\n      data\n    } = this.state;\n\n    let rateArray = Object.entries(CurrencyRates);\n\n    let s = rateArray.map(b => {\n      return b[0];\n    });\n    let t = rateArray.map(b => {\n      return b[1];\n    });\n\n    const sortArrays = rateArray.sort().map((items, i) => {\n      return (\n        <option key={i} value={[items[1], items[0]]}>\n          {items[0]}\n        </option>\n      );\n    });\n\n    return (\n      <div>\n        <div id='header'>\n          <h1>CurrencyXChange</h1>\n        </div>\n\n        <div id='container'>\n          <div id='calculator'>\n            <input\n              value={amountInput}\n              onChange={e => this.setState({ amountInput: e.target.value })}\n            />\n\n            <select value={fromSelect} onChange={this.fromChange}>\n              <option value={[\"1\"]}>{data.base}</option>\n              {sortArrays}\n            </select>\n            <select value={toSelect} onChange={this.toChange}>\n              <option value={[\"1\"]}>{data.base}</option>\n              {sortArrays}\n            </select>\n          </div>\n          <div id='conversion'>\n            <button onClick={this.calc}>Convert</button>\n          </div>\n        </div>\n        <div id={display ? \"results\" : \"hidden\"}>\n          <div id='fromto'>\n            <h2>\n              {fromSelect[1]} to {toSelect[1]}\n            </h2>\n          </div>\n          <div id='converted'>\n            <div id='start'>\n              {\" \"}\n              <h2>\n                {amountInput} {fromSelect[1]} =\n              </h2>\n            </div>\n            <div id='mid'>\n              <h1>\n                {exchanged} {toSelect[1]}\n              </h1>\n            </div>\n            <div id='fin'>\n              {\" \"}\n              <h2>\n                {\" \"}\n                1 {fromSelect[1]} = {oneFromRate} {toSelect[1]}\n              </h2>\n              <h2>\n                {\" \"}\n                1 {toSelect[1]} = {oneToRate} {fromSelect[1]}\n              </h2>\n            </div>\n          </div>\n          <div id='date'>\n            <h2>Updated on:{data.date}</h2>\n          </div>\n        </div>\n        <Chart name={s} exc={t} date={data.date} based={data.base} />\n      </div>\n    );\n  }\n}\n\nexport default Currency;\n","import React, { Component } from \"react\";\nimport Currency from \"./Components/Currency/Currency\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <Currency />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}